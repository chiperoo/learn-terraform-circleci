version: 2.1
orbs:
  jq: circleci/jq@2.1.0

references:

commands:
  publish_terraform_output:
    parameters:
      input-file:
        type: string
    steps:
      - run:
          name: publish terraform output
          command: |
            if [ $(cat /tmp/pr-response | jq length) -eq 0 ]; then
              echo "No PR found to update"
            else
              pr_comment_url=$(cat /tmp/pr-response | jq -r ".[0]._links.comments.href")

              # get the TF plan output (from the workspace)
              # 1. escape the double quotes
              # 2. add a \n at the end of each line
              # 3. delete the empty lines
              pr_comment=$(cat << parameters.input-file >> | \
                sed 's/"/\\\"/g' | \
                sed 's/$/\\n/g' | \
                tr -d '\n')

              codeblock='```'
              pr_comment_json="{ \"body\": \"${codeblock}\n${pr_comment}\n${codeblock}\" }"

              curl --location --request POST "${pr_comment_url}" \
                -u $GH_USER:$GH_TOKEN \
                --header 'Content-Type: application/json' \
                --data-binary "${pr_comment_json}"
            fi


base_image: &base_image
  hashicorp/terraform:light

working_directory: &working_directory
  ~/project

default_config: &default_config
  docker:
    - image: *base_image
  working_directory: *working_directory
  environment:
    BASH_ENV: /root/.bashrc
    TERRAFORM_ENV: ~/project/

repo_cache_key: &repo_cache_key
  v1-repo-{{ .Branch }}-{{ .Revision }}

# Step to restore repository from cache
restore_repo: &restore_repo
  restore_cache:
    key: *repo_cache_key

save_repo: &save_repo
  save_cache:
    key: *repo_cache_key
    paths:
      - *working_directory

set_terraform_environment: &set_terraform_environment
  run:
    name: set terraform environment
    command: |
      cd && touch $BASH_ENV
      cd ~/project/

terraform_init: &terraform_init
  run:
    name: terraform init
    command: |
      source $BASH_ENV
      cd ~/project/
      terraform init -backend-config="token=${TF_API_TOKEN}"

apply_job: &apply_job
  <<: *default_config
  steps:
    - *restore_repo
    - *set_terraform_environment
    - *terraform_init
    - attach_workspace:
        at: *working_directory
    - run:
        name: terraform apply
        command: |
          source $BASH_ENV
          cd ~/project/
          terraform init -backend-config="token=${TF_API_TOKEN}"
          terraform apply --auto-approve -no-color | tee /tmp/terraform-output
    - persist_to_workspace: # save the TF plan output to the workspace for updating a PR
        root: /tmp
        paths:
          - terraform-output


compliance_test: &compliance_test
  run:
    name: terraform-compliance tests
    command: |
      pip install terraform-compliance

      terraform-compliance -f compliance-tests/ -p /tmp/terraform-plan-outfile | perl -pe 's/\x1b\[[0-9;]*[mG]//g' | tee /tmp/terraform-compliance-test-output
    - persist_to_workspace: # save the TF plan output to the workspace for updating a PR
        root: /tmp
        paths:
          - terraform-compliance-test-output

jobs:

  build:
    <<: *default_config
    steps:
      - checkout
      - *set_terraform_environment
      - run:
          name: terraform fmt
          command: |
            source $BASH_ENV
            cd ~/project/
            terraform init -backend-config="token=${TF_API_TOKEN}"
            terraform fmt
      - *save_repo

  plan:
    <<: *default_config
    steps:
      - *restore_repo
      - *set_terraform_environment
      - *terraform_init
      - run:
          name: terraform plan
          command: |
            source $BASH_ENV
            cd ~/project/
            terraform plan -input=false -no-color -out=/tmp/terraform-plan-outfile | tee /tmp/terraform-output
      - persist_to_workspace: # save the TF plan output to the workspace for updating a PR
          root: /tmp
          paths:
            - terraform-plan-outfile
            - terraform-output

  apply:
    <<: *apply_job
  apply-with-approval:
    <<: *apply_job

  update_open_pr:
    docker: [{ image: "circleci/python:latest" }]
    working_directory: "~/project"

    steps:
      - attach_workspace:
          at: /tmp
      - run:
          name: get open pr url
          command: |
            curl --location --request GET "https://api.github.com/repos/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/pulls?head=$CIRCLE_PROJECT_USERNAME:$CIRCLE_BRANCH&state=open&sort=updated&direction=desc" \
              -u $GH_USER:$GH_TOKEN > /tmp/pr-response
      - publish_terraform_output:
          input-file: /tmp/terraform-output
      - compliance_test:
          input-file: /tmp/terraform-compliance-test-output

  update_closed_pr:
    docker: [{ image: "circleci/python:latest" }]
    working_directory: "~/project"

    steps:
      - attach_workspace:
          at: /tmp
      - run:
          name: get closed pr url
          command: |
            curl --location --request GET "https://api.github.com/repos/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/pulls?state=closed&sort=updated&direction=desc" \
              -u $GH_USER:$GH_TOKEN > /tmp/pr-response
      - publish_terraform_output:
          input-file: /tmp/terraform-output

  deployment:
    docker: [{ image: "circleci/python:latest" }]
    working_directory: "~/project"

    steps:
      - run:
          name: "Push to S3"
          command: |
            pip install --user awscli
            export PATH="~/.local/bin:$PATH"
            git clone https://github.com/hashicorp/learn-terraform-circleci/ .
            aws s3 sync --acl public-read "/home/circleci/project/assets" s3://${APP_BUCKET}

  destroy:
    <<: *default_config
    steps:
      - *restore_repo
      - *set_terraform_environment
      - *terraform_init
      - run:
          name: "Destruction of env"
          command: |
            source $BASH_ENV
            cd ~/project/
            terraform destroy --auto-approve

workflows:
  version: 2
  build_plan_approve_apply:
    jobs:
      - build
      - plan:
          context: learn-circle-staging
          requires:
            - build
      - update_open_pr:
          requires:
            - plan
#      - apply:
#          context: learn-circle-staging
#          requires:
#            - plan
#      - deployment:
#          requires:
#            - apply
#      - hold:
#          type: approval
#          requires:
#            - deployment
#      - destroy:
#          requires:
#            - hold
#
